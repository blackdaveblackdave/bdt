"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_wallets_injected_index_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/injected/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/injected/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoConnectInjectedWallet: function() { return /* binding */ autoConnectInjectedWallet; },\n/* harmony export */   connectInjectedWallet: function() { return /* binding */ connectInjectedWallet; },\n/* harmony export */   getInjectedProvider: function() { return /* binding */ getInjectedProvider; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/typedData.js\");\n/* harmony import */ var _chains_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../chains/utils.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/chains/utils.js\");\n/* harmony import */ var _utils_address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/address.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/address.js\");\n/* harmony import */ var _utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/encoding/hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/hex.js\");\n/* harmony import */ var _utils_signatures_helpers_parseTypedData_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/signatures/helpers/parseTypedData.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/signatures/helpers/parseTypedData.js\");\n/* harmony import */ var _utils_chains_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/chains.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/utils/chains.js\");\n/* harmony import */ var _utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/normalizeChainId.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/utils/normalizeChainId.js\");\n/* harmony import */ var _mipdStore_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mipdStore.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/injected/mipdStore.js\");\n\n\n\n\n\n\n\n\n// TODO: save the provider in data\nfunction getInjectedProvider(walletId) {\n    const provider = (0,_mipdStore_js__WEBPACK_IMPORTED_MODULE_0__.injectedProvider)(walletId);\n    if (!provider) {\n        throw new Error(`No injected provider found for wallet: \"${walletId}\"`);\n    }\n    return provider;\n}\n/**\n * @internal\n */\nasync function connectInjectedWallet(id, options, emitter) {\n    const provider = getInjectedProvider(id);\n    const addresses = await provider.request({\n        method: \"eth_requestAccounts\",\n    });\n    const addr = addresses[0];\n    if (!addr) {\n        throw new Error(\"no accounts available\");\n    }\n    // use the first account\n    const address = (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(addr);\n    // get the chainId the provider is on\n    const chainId = await provider\n        .request({ method: \"eth_chainId\" })\n        .then(_utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId);\n    let connectedChain = options.chain && options.chain.id === chainId\n        ? options.chain\n        : (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_3__.getCachedChain)(chainId);\n    // if we want a specific chainId and it is not the same as the provider chainId, trigger switchChain\n    if (options.chain && options.chain.id !== chainId) {\n        await switchChain(provider, options.chain);\n        connectedChain = options.chain;\n    }\n    return onConnect(provider, address, connectedChain, emitter);\n}\n/**\n * @internal\n */\nasync function autoConnectInjectedWallet(id, emitter, chain) {\n    const provider = getInjectedProvider(id);\n    // connected accounts\n    const addresses = await provider.request({\n        method: \"eth_accounts\",\n    });\n    const addr = addresses[0];\n    if (!addr) {\n        throw new Error(\"no accounts available\");\n    }\n    // use the first account\n    const address = (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(addr);\n    // get the chainId the provider is on\n    const chainId = await provider\n        .request({ method: \"eth_chainId\" })\n        .then(_utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId);\n    const connectedChain = chain && chain.id === chainId ? chain : (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_3__.getCachedChain)(chainId);\n    return onConnect(provider, address, connectedChain, emitter);\n}\nfunction createAccount(provider, _address) {\n    const account = {\n        address: (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(_address),\n        async sendTransaction(tx) {\n            const transactionHash = (await provider.request({\n                method: \"eth_sendTransaction\",\n                params: [\n                    {\n                        accessList: tx.accessList,\n                        value: tx.value ? (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(tx.value) : undefined,\n                        gas: tx.gas ? (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(tx.gas) : undefined,\n                        from: this.address,\n                        to: tx.to,\n                        data: tx.data,\n                    },\n                ],\n            }));\n            return {\n                transactionHash,\n            };\n        },\n        async signMessage({ message }) {\n            if (!account.address) {\n                throw new Error(\"Provider not setup\");\n            }\n            const messageToSign = (() => {\n                if (typeof message === \"string\") {\n                    return (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.stringToHex)(message);\n                }\n                if (message.raw instanceof Uint8Array) {\n                    return (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.uint8ArrayToHex)(message.raw);\n                }\n                return message.raw;\n            })();\n            return await provider.request({\n                method: \"personal_sign\",\n                params: [messageToSign, account.address],\n            });\n        },\n        async signTypedData(typedData) {\n            if (!provider || !account.address) {\n                throw new Error(\"Provider not setup\");\n            }\n            const parsedTypedData = (0,_utils_signatures_helpers_parseTypedData_js__WEBPACK_IMPORTED_MODULE_5__.parseTypedData)(typedData);\n            const { domain, message, primaryType } = parsedTypedData;\n            const types = {\n                EIP712Domain: (0,viem__WEBPACK_IMPORTED_MODULE_6__.getTypesForEIP712Domain)({ domain }),\n                ...parsedTypedData.types,\n            };\n            // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n            // as we can't statically check this with TypeScript.\n            (0,viem__WEBPACK_IMPORTED_MODULE_6__.validateTypedData)({ domain, message, primaryType, types });\n            const stringifiedData = (0,viem__WEBPACK_IMPORTED_MODULE_6__.serializeTypedData)({\n                domain: domain ?? {},\n                message,\n                primaryType,\n                types,\n            });\n            return await provider.request({\n                method: \"eth_signTypedData_v4\",\n                params: [account.address, stringifiedData],\n            });\n        },\n        async watchAsset(asset) {\n            const result = await provider.request({\n                method: \"wallet_watchAsset\",\n                params: asset,\n            }, { retryCount: 0 });\n            return result;\n        },\n    };\n    return account;\n}\n/**\n * Call this method when the wallet provider is connected or auto connected\n * @internal\n */\nasync function onConnect(provider, address, chain, emitter) {\n    const account = createAccount(provider, address);\n    async function disconnect() {\n        provider.removeListener(\"accountsChanged\", onAccountsChanged);\n        provider.removeListener(\"chainChanged\", onChainChanged);\n        provider.removeListener(\"disconnect\", onDisconnect);\n    }\n    async function onDisconnect() {\n        disconnect();\n        emitter.emit(\"disconnect\", undefined);\n    }\n    function onAccountsChanged(accounts) {\n        if (accounts[0]) {\n            const newAccount = createAccount(provider, (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]));\n            emitter.emit(\"accountChanged\", newAccount);\n            emitter.emit(\"accountsChanged\", accounts);\n        }\n        else {\n            onDisconnect();\n        }\n    }\n    function onChainChanged(newChainId) {\n        const newChain = (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_3__.getCachedChain)((0,_utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(newChainId));\n        emitter.emit(\"chainChanged\", newChain);\n    }\n    if (provider.on) {\n        provider.on(\"accountsChanged\", onAccountsChanged);\n        provider.on(\"chainChanged\", onChainChanged);\n        provider.on(\"disconnect\", onDisconnect);\n    }\n    return [\n        account,\n        chain,\n        onDisconnect,\n        (newChain) => switchChain(provider, newChain),\n    ];\n}\n/**\n * @internal\n */\nasync function switchChain(provider, chain) {\n    const hexChainId = (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(chain.id);\n    try {\n        await provider.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: hexChainId }],\n        });\n        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix any\n    }\n    catch (e) {\n        // if chain does not exist, add the chain\n        if (e?.code === 4902 || e?.data?.originalError?.code === 4902) {\n            const apiChain = await (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_3__.getChainMetadata)(chain);\n            await provider.request({\n                method: \"wallet_addEthereumChain\",\n                params: [\n                    {\n                        chainId: hexChainId,\n                        chainName: apiChain.name,\n                        nativeCurrency: apiChain.nativeCurrency,\n                        rpcUrls: (0,_utils_chains_js__WEBPACK_IMPORTED_MODULE_7__.getValidPublicRPCUrl)(apiChain), // no client id on purpose here\n                        blockExplorerUrls: apiChain.explorers?.map((x) => x.url),\n                    },\n                ],\n            });\n        }\n        else {\n            throw e;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/wallets/injected/index.js\n"));

/***/ })

}]);